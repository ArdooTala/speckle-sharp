version: 2.1

orbs:
  # Swissknife is the orb that handles per-project change detection
  swissknife: roopakv/swissknife@0.54.0
  # jq is required to be installed to use some swissknife functions.
  jq: circleci/jq@2.2.0
  # Using windows for builds
  win: circleci/windows@2.2.0
  # Upload artifacts to s3
  aws-s3: circleci/aws-s3@2.0.0


# Parameters of our pipeline. Most of them are booleans that indicate which project to build/test with the pattern 'run_{PROJECT_NAME}'
parameters:
  # This parameter is initially set to true to run the 'ci' workflow. After first execution, the parameter will be set to false, preventing multiple executions of the selective-ci job on the same commit.
  run_trigger_workflow:
    type: boolean
    default: true

  # Per project flag parameters
  run_core:
    type: boolean
    default: false
  run_objects:
    type: boolean
    default: false
  run_connector_gh:
    type: boolean
    default: false
  run_connector_revit:
    type: boolean
    default: false
  run_connector_dynamo:
    type: boolean
    default: false
  run_connector_rhino:
    type: boolean
    default: false


# Each project will have individual jobs for each specific task it has to execute (build, release...)
jobs:
  # The job that selects which job to run
  selective-ci:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:3.1-focal
    steps:
      - checkout
      - jq/install
      - swissknife/trigger-workflows-for-all-modified:
          base-branch: master
          use-divergence-point: true
          run-mode-for-base-branch: run_for_last_commit
          additional-param-map: '{"run_trigger_workflow": false}'
          code-param-name-map: '[
            {"regex": "Objects/.*", "param_name": "run_objects"},
            {"regex": "Core/.*", "param_name": "run_core"},
            {"regex": "ConnectorGrasshopper/.*", "param_name": "run_connector_gh"},
            {"regex": "ConnectorDynamo/.*", "param_name": "run_connector_dynamo"},
            {"regex": "ConnectorRevit/.*", "param_name": "run_connector_revit"},
            {"regex": "ConnectorRhino/.*", "param_name": "run_connector_rhino"}
          ]'
  
  build-core:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:3.1-focal
    steps:
      - checkout
      - run: 
          name: Restore Core packages
          command: dotnet restore Core/Core.sln
      - run: 
          name: Build Core
          command: dotnet build Core/Core.sln --no-restore
      - run: 
          name: Test Core
          command: dotnet test Core/Tests/TestsUnit.csproj --no-restore --no-build

  # TODO: And transfer it into the knowledge base.
  # TODO: Test the RevitSharedProject build.
  build-objects:
    executor:
      name: win/default
      shell: powershell.exe
    steps:
      - checkout
      - run:
          name: Restore Objects Packages
          command: dotnet restore Objects/Objects.sln -p:IsDesktopBuild=false
      - run: 
          name: Build Objects
          command: dotnet build Objects/Objects/Objects.csproj -p:IsDesktopBuild=false
      - run: 
          name: Build Dynamo Converter
          command: dotnet build Objects/Converters/ConverterDynamo/ConverterDynamo/ConverterDynamo.csproj -p:IsDesktopBuild=false
      - run: 
          name: Build Revit 2019 Converter
          command: dotnet build Objects/Converters/ConverterRevit/ConverterRevit2019/ConverterRevit2019.csproj -p:IsDesktopBuild=false
      - run: 
          name: Build Revit 2020 Converter
          command: dotnet build Objects/Converters/ConverterRevit/ConverterRevit2020/ConverterRevit2020.csproj -p:IsDesktopBuild=false
      - run: 
          name: Build Revit 2021 Converter
          command: dotnet build Objects/Converters/ConverterRevit/ConverterRevit2021/ConverterRevit2021.csproj -p:IsDesktopBuild=false
      - run: 
          name: Build Restore GH Converter
          command: nuget restore Objects/Converters/ConverterRhinoGh/ConverterRhinoGh/ConverterRhinoGh.csproj
      - run: 
          name: Build GH Converter
          command: msbuild Objects/Converters/ConverterRhinoGh/ConverterRhinoGh/ConverterRhinoGh.csproj /p:Configuration=Release /p:PreBuildEvent= /p:PostBuildEvent=
  build-connector-gh:
    executor:
      name: win/default
      shell: powershell.exe
    steps:
      - checkout
      - run: 
          name: Restore GH Connector
          command: nuget restore ConnectorGrasshopper/ConnectorGrasshopper.sln
      - run: 
          name: Build GH Connector
          command: msbuild ConnectorGrasshopper/ConnectorGrasshopper.sln /p:Configuration=Release
  build-connector-dynamo:
    executor:
      name: win/default
      shell: powershell.exe
    steps:
      - checkout
      - run: 
          name: Restore Dynamo Connector
          command: nuget restore ConnectorDynamo/ConnectorDynamo.sln
      - run: 
          name: Build Dynamo Sandbox Connector
          command: msbuild ConnectorDynamo/ConnectorDynamo/ConnectorDynamo.csproj /p:Configuration=ReleaseSandbox /p:WarningLevel=0
      - run: 
          name: Build Dynamo Revit Connector
          command: msbuild ConnectorDynamo/ConnectorDynamo/ConnectorDynamo.csproj /p:Configuration=ReleaseRevit /p:WarningLevel=0

  
  build-connector-revit:
    executor:
      name: win/default
      shell: powershell.exe
    steps:
      - checkout
      - run: 
          name: Restore Revit Connector
          command: nuget restore ConnectorRevit/ConnectorRevit.sln
      - run: 
          name: Build Revit 2021 Connector
          command: msbuild ConnectorRevit/ConnectorRevit2021/ConnectorRevit2021.csproj /p:Configuration=Release /p:PreBuildEvent= /p:PostBuildEvent= /p:AfterBuildRelease= /p:IsDesktopBuild=false
      - run: 
          name: Build Revit 2020 Connector
          command: msbuild ConnectorRevit/ConnectorRevit2020/ConnectorRevit2020.csproj /p:Configuration=Release /p:PreBuildEvent= /p:PostBuildEvent= /p:AfterBuildRelease= /p:IsDesktopBuild=false
      - run: 
          name: Build Revit 2019 Connector
          command: msbuild ConnectorRevit/ConnectorRevit2019/ConnectorRevit2019.csproj /p:Configuration=Release /p:PreBuildEvent= /p:PostBuildEvent= /p:AfterBuildRelease= /p:IsDesktopBuild=false
  build-connector-rhino:
    executor:
      name: win/default
      shell: powershell.exe
    steps:
      - checkout
      - run: 
          name: Restore Rhino Connector
          command: nuget restore ConnectorRhino/ConnectorRhino.sln
      - run: 
          name: Build Rhino Connector
          command: msbuild ConnectorRhino/ConnectorRhino.sln /p:Configuration=Release

  # The integration tests. Spins up a full blown speckle server.
  integration-tests:
    working_directory: /temp

    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:3.1-focal
      - image: "circleci/redis:6"
      - image: "circleci/postgres:12"
        environment:
          POSTGRES_DB: speckle2_dev
          POSTGRES_PASSWORD: speckle
          POSTGRES_USER: speckle

    environment:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      NODE_ENV: test
      DATABASE_URL: "postgres://speckle:speckle@localhost:5432/speckle2_dev"
      PGDATABASE: speckle2_dev
      PGUSER: speckle
      SESSION_SECRET: "keyboard cat"
      STRATEGY_LOCAL: true
      CANONICAL_URL: "http://localhost:3000"

    steps:
      - run:
          name: "Install node"
          command: |
            curl -sL https://deb.nodesource.com/setup_lts.x | bash -
            apt-get install -y nodejs
      - run:
          name: "Checkout server"
          command: "git clone https://github.com/specklesystems/Server.git server"
      - run:
          working_directory: server/packages/server
          name: "Install deps"
          command: "npm install"
      - run:
          name: "Start server"
          working_directory: server/packages/server
          command: "npm run dev"
          background: true
      - checkout:
          path: core
      - run:
          working_directory: core
          name: "Pull core submodules"
          command: |
            git submodule init
            git submodule update --remote
      - run:
          working_directory: core
          command: dotnet restore Core/Core.sln
      - run:
          working_directory: core
          command: dotnet build --configuration Release Core/Core.sln
      - run:
          working_directory: core
          command: dotnet test Core/IntegrationTests/TestsIntegration.csproj --logger:"Console;noprogress=true"

  # Upload all installers found to S3
  deploy:
    docker:
      - image: cimg/base:2021.01
    steps:    
      - attach_workspace:
          at: ./
      - aws-s3/copy:
          arguments: '--recursive --endpoint=https://$SPACES_REGION.digitaloceanspaces.com'
          aws-access-key-id: SPACES_KEY
          aws-region: SPACES_REGION
          aws-secret-access-key: SPACES_SECRET
          from: '"Installers/"'
          to: s3://speckle-releases/installers/

# The main workflows for our monorepo pipeline.
# The main workflow is called 'ci': It is the workflow responsible of determining which projects to build/test.
# There should be at least one workflow per project in the monorepo. Each workflow should be run only when a boolean parameter is passed that corresponds to the pattern 'run_{PROJECT_NAME}'. 
# These parameters are set by the 'selective-ci' job.
workflows:
  # Main workflow. Must be conditioned to the 'run_trigger_workflow' parameter to prevent recursive execution of the job.
  ci:
    when: << pipeline.parameters.run_trigger_workflow >>
    jobs:
      - selective-ci:
          filters: # Only run on branches
            tags:
              ignore: /.*/
  # Objects - Build/Test
  objects:
    when: << pipeline.parameters.run_objects >>
    jobs:
      - build-objects
  
  # Core - Build/Test
  core:
    when: << pipeline.parameters.run_core >>
    jobs:
      - build-core
      - integration-tests:
          requires:
            - "build-core"
  
  # Grasshopper connector - Build/Test
  connector_grasshopper:
    when: << pipeline.parameters.run_connector_gh >>
    jobs:
      - build-connector-gh
  
  # Rhino connector - Build/Test
  connector_rhino:
    when: << pipeline.parameters.run_connector_rhino >>
    jobs:
      - build-connector-rhino

  # Dynamo connector - Build/Test
  connector_dynamo:
    when: << pipeline.parameters.run_connector_dynamo >>
    jobs:
      - build-connector-dynamo
  
  # Revit Connector - Build/Test
  connector_revit:
    when: << pipeline.parameters.run_connector_revit >>
    jobs:
      - build-connector-revit
      
  # Deployment
  deployment:
    jobs:
      - build-connector-dynamo:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^dynamo.*/
          post-steps:
            - run:
                name: Patch Assembly 
                command: | #if there is a tag, use it to patch the assembly
                  $version = if([string]::IsNullOrEmpty($env:CIRCLE_TAG)) { "1.0.0.0" } else { $env:CIRCLE_TAG.replace("dynamo/","") } 
                  Build/Patch/Patcher.exe ConnectorDynamo/ConnectorDynamo/dist/ SpeckleConnectorDynamo.dll $version
            - run: 
                name: Run Installer
                command: Build/InnoSetup/ISCC.exe ConnectorDynamo/Installer.iss
            - persist_to_workspace:
                root: Build/
                paths:
                  - Installers
      - deploy:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^dynamo.*/
          requires:
            - build-connector-dynamo
